# -*- coding: utf-8 -*-
"""Film Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bb793TEX9XaRxuTCFx76huYtobkTlYZN
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
!pip install nltk
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import re
from nltk.stem import PorterStemmer
nltk.download('stopwords')
nltk.download('punkt')

pd.set_option('display.max_columns', 100)
df = pd.read_csv("/content/imdb_top_1000.csv",index_col=False)

df.head()

df = df[['Series_Title', 'Overview', 'Genre', 'Director','Star1' ,'Star2' ,'Star3' ,'Star4']]
df["Actor"] = df['Star1'].str.cat(df[["Star2", "Star3", "Star4"]].copy(), sep=" ")
df.drop(['Star1', 'Star2', 'Star3', 'Star4'], inplace=True, axis=1)
df["Director"].str.replace(' ', '')
df.head()

"""Making bag of word field"""

df["Bag_of_Word"] = df['Overview'].str.cat(df[["Overview", "Genre", "Director", "Actor"]].copy(), sep=" ")
df.drop(["Overview", "Genre", "Actor", "Director"], inplace=True, axis=1)
df.head()

def data_processing(text):
    text= text.lower()
    text = re.sub('<br />', '', text)
    text = re.sub(r"https\S+|www\S+|http\S+", '', text, flags = re.MULTILINE)
    text = re.sub(r'\@w+|\#', '', text)
    text = re.sub(r'[^\w\s]', '', text)
    text_tokens = word_tokenize(text)
    stop_words=stopwords.words("english")
    filtered_text = [w for w in text_tokens if not w in stop_words]
    return " ".join(filtered_text)

df.Bag_of_Word = df['Bag_of_Word'].apply(data_processing)

stemmer = PorterStemmer()
def stemming(data):
    text = [stemmer.stem(word) for word in data]
    return data
df.Bag_of_Word = df['Bag_of_Word'].apply(lambda x: stemming(x))

df.head()

"""Setting Index"""

df.set_index('Series_Title')
df.head()

"""Counting Vector of word"""

count = CountVectorizer()
count_matrix = count.fit_transform(df['Bag_of_Word'])

indices = pd.Series(df.Series_Title)
indices[:5]

print(count_matrix)

"""Creating cosine matrix similarity"""

cosine_sim = cosine_similarity(count_matrix, count_matrix)
cosine_sim

cosine_sim.shape

cosine_sim[0]

"""Function to get top 10 higest value of cosine for spesific index"""

def recommend (title, cosine_sim=cosine_sim):

    result = []
    idx = indices[indices == title].index[0]
    print (idx)

    score = pd.Series(cosine_sim[idx]).sort_values(ascending = False)
    top_10 = list(score.iloc[1:11].index)
    result = indices[top_10]
    return result

"""Example to get one index recommendation"""

result = recommend("The Dark Knight").index.to_list()
print(result)

result = recommend("12 Angry Men").index.to_list()
print(result)

"""Get the title from the index"""

result = recommend("Veer-Zaara").to_frame().reset_index()
result.drop(["index"], inplace=True, axis=1)
print (result)

"""Get recommendation from all index"""

Result_of_recommendation = []
for i in df["Series_Title"]:
    result = recommend(i).index.to_list()
    Result_of_recommendation.append(result)

df["Top_10_recommendation"] = Result_of_recommendation

"""Recall one of the index"""

df[["Series_Title", "Top_10_recommendation"]][0:1]

recommendations = df["Series_Title"][0]
index_recommend = df["Top_10_recommendation"][0]

print("Recommended films for", recommendations)

index_recommend

"""Recall the recommendation title of that recalled index before"""

indices[index_recommend]

df.head()

df

df.Series_Title.unique()

